To Add:
    Documentation about my config
        Store information about what mappings I've added, what customisation
        I've added etc.
        This will be useful for reminders and for anyone else wanting to
        understand what I've done.
    Check for windows
        disable those plugins that require a *nix environment.
        Implement helpers#external_program_missing() for windows.
            this currently just uses the `command` command, which isn't
            available on windows.
    Emacs frames see if any work on that is being made.
        https://github.com/neovim/neovim/issues/2161
        https://github.com/neovim/neovim/pull/6619
        It seems like @teto might know something about it.
        Have a look at the current implementation of screens, and whether it
        can be/is getting externalised.
        @justinmk uses an autocmd around `rshada | wshada` that gets a lot of
        the functionality needed.
        Have a look at that.
    Find something to map <BS> to.
    Make a better interface for working with hex-dumps
        - Search hex ignoring line breaks (and ascii/offsets if using xxd)
        - Search ascii only (ignoring line breaks, offsets, and hex)
        - Maybe achieve the above by splitting the ascii, hex, and offsets into
          different windows
        - Improved versions of `go` and `:goto` that go to the hex position of
          that part of the original file instead of that position in the
          hexdump.
    Literate programming for vim?
        https://github.com/zyedidia/Literate
        https://github.com/zyedidia/literate.vim
    Use neovim async for grepprg
        See grepper https://github.com/mhinz/vim-grepper
        Works but I don't really like the interface.
    Allow navigation via mouse
        Have a look at what acme(1) does, and what vim(1) already does.
        helpers#plumb_this() should leave the mouse above the cursor.
    'includeexpr' for lua, and other filetypes where gf in general doesn't
        work.

To Fix:
    :dp and :dl print/list the line just below the ones just deleted.
        This may be the point of the commands, but I don't understand it if
        that's the case.
    vim-abolish switching between words-like-this-multi and words_like_this_multi
        doesn't appear to be able to handle words with more than three parts.
        i.e. words-like-this and words_like_this can be switched fine.
    zb if folded and current line can't be scrolled past half way (but were
    folds open it could).
    vim-sneak, ',' and ';' break 'ct,' and 'ct;' mappings.
        Instead of going up to the character specified, they go to one
        character before the one specified.
    Be able to view quickfix buffer in current window.
    :tags command shows incorrect tag name next to the tag position
    ctags -- use a tag file, then :cd, then navigate to another tag.
        I got an error doing this once.
    The mapping `cw` `dwi` breaks the `.` command
        Probably have to make it a function and (maybe) use the repeat plugin.
    The % operator appears to be linewise when the current cursor is on
    whitespace before the line start and before the opening bracket, charwise
    otherwise?
        `test.txt`
        ```
            hello(function
                call)
        ```
        Running `d%` when in the whitespace before the line removes all text.
        Running `d%` when in the `hello` word removes text from the cursor to
        the end of the bracket.
    vim-exchange
        Highlighting doesn't happen when cursor is in a tab character.
    vim-sneak
        Reads with 'keymap' enabled, but passes keys across in command mode
        (i.e. with 'keymap' disabled and with 'langmap' enabled).
        This is confusing, but I don't know what to do about it.
    vim-repeat and vim-surround
        repeating ysf)`  repeats as ysf)'
        doesn't happen for yse` ysiw` or anything else I've tried
        doesn't appear to be affected by 'iminsert', though only tried by
        toggling it once already set.
        (this line)  (is a test for the above)
    Lose submode modes when losing focus because of the <FocusLost> key passed
    to neovim.
        (I think this is the case -- the mode isn't lost in vim, and
        <FocusLost> isn't inserted into the buffer in vim with C-v)
    C-v block insert with autoindent
        Example file:
            function s:createColorGroups()
              let colornumbers = ['Black', 'DarkBlue', 'DarkGreen', 'DarkCyan', 'DarkRed',
              'DarkMagenta', 'Brown', 'DarkYellow', 'LightGray', 'LightGrey', 'Gray',
              'Grey', 'DarkGray', 'DarkGrey', 'Blue', 'LightBlue', 'Green', 'LightGreen',
              'Cyan', 'LightCyan', 'Red', 'LightRed', 'Magenta', 'LightMagenta', 'Yellow',
              'LightYellow', 'White']
            endfunction
        Move to the 'DarkMagenta' line, create a visual block of those elements
        in the list, press 'I\  <esc>'.
        Observation:
            The '\' character makes the indent get recalculated, after leaving
            insert mode there is a bunch of stuff out of place.
    C-vC-j inserts C-@ into the buffer, C-vC-<space> inserts a space, C-vC-@
    inserts a space into the buffer.
        Should be able to insert C-j into the buffer.
    Search pattern highligt:
        Search for X number of lines and move to the end
        Highlight of the search pattern works down from when the search was
        initiated.
        Sometimes end up on different lines to those that are highlighted
        because of other motion.
        `test.txt`
        ```
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        ```

        `/\(Hello.*\n\)\{2}/e`
    :append doesn't call changed_lines()
    :append leaves the cursor in the insert shape
    :append when typing blank lines it doesn't show them in the echo area.
    Syntax highlighting after argdo on first command.
        This is something to do with when the syntax parsing happens -- I
        remember bairui pointing something out on #vim.
        Basically if a buffer has an argument applied to it using :bufdo or
        :argdo before it gets viewed then the syntax doesn't get applied to it.
    Neovim doesn't accept my <LeftRelease> mapping.
        This seems to be a problem with that key and not with the mapping I'm
        asking for (many different mappings all don't work).
        Attempting to map <RightRelease> also doesn't work.
    Have a look at syntax checking capabilities of Neomake -- can it replace Syntastic?
    Heard there is a version of ctrlp that is more maintained -- have a look
    Remove all colorschemes I don't use
        currently use:
            molokai
            apprentice
            hybrid
            techras
            autumn
            pylight
        Search for others I like
    Possibly remove the SetColors script


Strange un-reproducible things I noticed once:
    Error to do with EPIPE after i_CTRL-R +
        This happened when writing a git commit message opened with 'cc' in the
            :Gstatus window.
        Was attempting to insert a URL copied from firefox
    Half of 'scrollbind' setting functionality happening with 'noscrollbind'
    set.
        A strange thing I noticed once: I used :Gblame to see when a line was
        added, then followed the commit number in the annotation line of that
        :Gblame, after closing that buffer, I noticed that 'scrollbind' was set
        in the two remaining windows viewing the original file buffer.
        After unsetting that value, some remnants of 'scrollbind' appeared to
        be active.
        This didn't persist over different buffers, but when changing back to
        two side-by-side windows viewing the same buffer it came back.
        Scrolling wasn't bound completely, only vertical scrolling once one
        window had reached the end of the buffer.
        Jumping was bound together.

Repo organisation:
    Find a nice method to update the colorschemes.
    Keep a list of all changed/added keybord shortcuts.

Plugins possibly to remove:
    python-mode - cannabalise the motion commands instead of using the
    Braceless stuff?
        What I use:
            Motion commands --> see what I have in patches
            Folding         --> autoload/pymode/folding.vim
                                Maybe modify this a bit to take account of closures


Keys that are valid mappings (i.e. don't directly overwrite anything):
     z .. {p,q,u,y,B,I,J,K,P,Q,S,T,U,V,Y,Z}
     Z .. [^ZQ]
     [ .. something
     ] .. something
     c .. something
     d .. something
     y .. something
     g .. something
     \ .. something

Keys I don't use:
    spelling mappings (actually, just very rarely use them)
    gQ


Neovim:

Things to add
    Use the Alt keys for useful things everywhere (yay for LeoNerds' libtermkey)
