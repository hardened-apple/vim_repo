To Add:
    Find something to map <BS> to.
    Interface to info files -- (i.e. similar to :Man).
    Use neovim async for grepprg
        See grepper https://github.com/mhinz/vim-grepper
    Allow navigation via mouse
        Have a look at what acme(1) does, and what vim(1) already does.

To Fix:
    i_CTRL-S waits for input from user???
        Figure out why, and what it does, and everything else.
    :tags command shows incorrect tag name next to the tag position
    ctags -- use a tag file, then :cd, then navigate to another tag.
        I got an error doing this once.
    The mapping `cw` `dwi` breaks the `.` command
        Probably have to make it a function and (maybe) use the repeat plugin.
    The % operator appears to be linewise when the current cursor is on
    whitespace before the line start and before the opening bracket, charwise
    otherwise?
        `test.txt`
        ```
            hello(function
                call)
        ```
        Running `d%` when in the whitespace before the line removes all text.
        Running `d%` when in the `hello` word removes text from the cursor to
        the end of the bracket.
    vim-exchange
        Highlighting doesn't happen when cursor is in a tab character.
    vim-sneak
        Reads with 'keymap' enabled, but passes keys across in command mode
        (i.e. with 'keymap' disabled and with 'langmap' enabled).
        This is confusing, but I don't know what to do about it.
    vim-sneak
        When foldmethod=marker, but default is that foldmethod=syntax
        it resets to foldmethod=syntax
    vim-sneak
        Using '-' as a key character jumps to somewhere completely different.
    vim-repeat and vim-surround
        repeating ysf)`  repeats as ysf)'
        doesn't happen for yse` ysiw` or anything else I've tried
        doesn't appear to be affected by 'iminsert', though only tried by
        toggling it once already set.
    Lose submode modes when losing focus because of the <FocusLost> key passed
    to neovim.
        (I think this is the case -- the mode isn't lost in vim, and
        <FocusLost> isn't inserted into the buffer in vim with C-v)
    C-v block insert with autoindent
        Example file:
            function s:createColorGroups()
              let colornumbers = ['Black', 'DarkBlue', 'DarkGreen', 'DarkCyan', 'DarkRed',
              'DarkMagenta', 'Brown', 'DarkYellow', 'LightGray', 'LightGrey', 'Gray',
              'Grey', 'DarkGray', 'DarkGrey', 'Blue', 'LightBlue', 'Green', 'LightGreen',
              'Cyan', 'LightCyan', 'Red', 'LightRed', 'Magenta', 'LightMagenta', 'Yellow',
              'LightYellow', 'White']
            endfunction
        Move to the 'DarkMagenta' line, create a visual block of those elements
        in the list, press 'I\  <esc>'.
        Observation:
            The '\' character makes the indent get recalculated, after leaving
            insert mode there is a bunch of stuff out of place.
    C-vC-j inserts C-@ into the buffer, C-vC-<space> inserts a space, C-vC-@
    inserts a space into the buffer.
        Should be able to insert C-j into the buffer.
    Search pattern highligt:
        Search for X number of lines and move to the end
        Highlight of the search pattern works down from when the search was
        initiated.
        Sometimes end up on different lines to those that are highlighted
        because of other motion.
        `test.txt`
        ```
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        Hello there
        ```

        `/\(Hello.*\n\)\{2}/e`
    Folds close after certain commands:
        :move +
            This is hard-coded to do this in order to avoid a different
            problem.
            Foldmethod marker, syntax, foldexpr, indent -- always closes folds.
            foldmethod=manual -- doesn't close fold
    Pymode folding sometimes just goes away -- figure out why and when.
    Syntax highlighting after argdo on first command.
        This is something to do with when the syntax parsing happens -- I
        remember bairui pointing something out on #vim.
        Basically if a buffer has an argument applied to it using :bufdo or
        :argdo before it gets viewed then the syntax doesn't get applied to it.
    Neovim doesn't accept my <LeftRelease> mapping.
        This seems to be a problem with that key and not with the mapping I'm
        asking for (many different mappings all don't work).
        Attempting to map <RightRelease> also doesn't work.
    Have a look at syntax checking capabilities of Neomake -- can it replace Syntastic?
    Heard there is a version of ctrlp that is more maintained -- have a look
    Remove all colorschemes I don't use
        currently use:
            molokai
            apprentice
            hybrid
            techras
            autumn
            pylight
        Search for others I like
    Possibly remove the SetColors script


Strange un-reproducible things I noticed once:
    Error to do with EPIPE after i_CTRL-R +
        This happened when writing a git commit message opened with 'cc' in the
            :Gstatus window.
        Was attempting to insert a URL copied from firefox
    Half of 'scrollbind' setting functionality happening with 'noscrollbind'
    set.
        A strange thing I noticed once: I used :Gblame to see when a line was
        added, then followed the commit number in the annotation line of that
        :Gblame, after closing that buffer, I noticed that 'scrollbind' was set
        in the two remaining windows viewing the original file buffer.
        After unsetting that value, some remnants of 'scrollbind' appeared to
        be active.
        This didn't persist over different buffers, but when changing back to
        two side-by-side windows viewing the same buffer it came back.
        Scrolling wasn't bound completely, only vertical scrolling once one
        window had reached the end of the buffer.
        Jumping was bound together.

Bug raised, not fixing myself just yet:
    Python-mode ^A when a number at the end of the line, removes space before
        the number.
        Something to do with setting the cursor position in indentexpr.
        Doing git-bisect found the problem in commit
        906eff560e0ab1ce037b6f7088ffb23aa9a4959a
    Python-mode after saving file, the ':s' command now replaces matching
        pattern with nothing.
        Can't find any way to save the previous replace pattern (other than a
        hack with s/^/~/ and exe 's/^/'oldpattern'/')
        Have registered a feature request with neovim.
    Lawrencium error message at start of vim if not in mercurial repository.
        Comes from the lawrencium#setup_buffer_commands() function, that calls
        lawrencium#hg_repo() which calls lawrencium#throw() only to be caught.

Repo organisation:
    Find a nice method to update the colorschemes.
    Keep a list of all changed/added keybord shortcuts.

Possible extras:
    Lisp ftplugin - map C-e and C-y to "move in sexp" up and down respectively.

Plugins possibly to remove:
    python-mode - cannabalise the motion commands and create a compile file for pylint2
        What I use:
            Motion commands --> see what I have in patches
            Folding         --> autoload/pymode/folding.vim
                                Maybe modify this a bit to take account of closures
            Lint            --> Make a compiler file for pylint2 and python2-pep8


Keys that are valid mappings (i.e. don't directly overwrite anything):
     z .. {p,q,u,y,B,I,J,K,P,Q,S,T,U,V,Y,Z}
     Z .. [^ZQ]
     [ .. something
     ] .. something
     c .. something
     d .. something
     y .. something
     g .. something
     \ .. something

Keys I don't use:
    spelling mappings (actually, just very rarely use them)
    Q
    gQ
    ZQ
    ZZ
    S


Neovim:

Things to add
    Use the Alt keys for useful things everywhere (yay for LeoNerds' libtermkey)
    Make the equivalent of the :terminal buffer that allows modification of the
    buffer.
        i.e. I want something like the acme(1) win(1) buffer.
        This is different to my vsh stuff because all output from the terminal
        and input into the terminal would be done at the end of the buffer.
        I imagine this would be more useful depending on what you want to do.
