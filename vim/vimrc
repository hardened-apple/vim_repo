"This is my vim Customisation file.
" NOTE: Function keys
"       <F1> - Help (as usual for vim)
"       <F2> -
"       <F3> - Ultisnips list completions
"       <F4> -
"       <F5> - GundoToggle
"       <F6> - TlistToggle
"       <F7> -
"       <F8> - switch through colours
"       <F9> - Dispatch
"       <F10> - Remove trailing whitespace
"       <F11> - (in C/C++) cscope update
"       <F12> - ctags update


set all&
runtime bundle/pathogen/autoload/pathogen.vim

" Pathogen plugin {{{
let g:pathogen_disabled = []
if v:version < 703
  let g:pathogen_disabled += ['clang_complete', 'ctrlp', 'ctrlp-funky', 'gundo', 'sneak', 'vimfindsme']
endif
if v:version < 702
  let g:pathogen_disabled += ['airline', 'gnupg']
endif
if v:version < 701
  let g:pathogen_disabled += ['abolish', 'tagbar']
endif
if v:version < 700
  let g:pathogen_disabled += ['commentary', 'dispatch', 'easygrep', 'eunuch',
        \ 'gitv', 'obsession', 'repeat', 'surround', 'ultisnips', 'snippets',
        \ 'unimpaired', 'vimple']
endif

if !has('python')
  let g:pathogen_disabled += ['jedi', 'vim-ipython', 'clang_complete', 'gundo']
else
python << EOF
try:
  import jedi
except ImportError:
  import vim
  vim.vars['pathogen_disabled'].extend(['jedi'])
EOF
endif

function! ExternalProgramMissing(program)
  silent call system('command -v ' . a:program)
  return v:shell_error
endfunction

" Check external dependencies -- clang, ipython, and git
if ExternalProgramMissing('clang')
  let g:pathogen_disabled += ['clang_complete']
endif

if ExternalProgramMissing('ipython3') && ExternalProgramMissing('ipython2')
  let g:pathogen_disabled += ['vim-ipython']
endif

if ExternalProgramMissing('git')
  let g:pathogen_disabled += ['fugitive',  'gitv']
endif

execute pathogen#infect()
call pathogen#helptags()
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Manage spaces and tabs {{{

"stay indented when getting new line
set autoindent
set shiftwidth=4

"make a tab change to 4 spaces
set expandtab
set tabstop=4

set nojoinspaces
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Errorbells {{{

"Don't keep bugging me whenever I type something wrong
set noerrorbells
"set novisualbells
set t_vb=
set tm=500

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Look/Appearance {{{

"Add a foldcolumn
set foldcolumn=2
"set the characters seperating multiple vim windows to blank space
set fillchars=vert:\ 
"can use set fillchars+=diff:\\ to make deleted lines in diffmode
"have the '\' character along them instead of the '-' character

" Always show filename
set ls=2

"Highlights all occurances of the last search pattern
" but let Space in command mode turn off the highlighting
set hlsearch

" If in C and using syntax folding, don't fold comments
" (is here not after/ftplugin as has to be active when syntax/c.vim is read)
let g:c_no_comment_fold = 1

"get vim to automatically highlight based on syntax and file extension
syntax on
filetype on
" cursorline/column
set cursorcolumn
set cursorline
color techras
" If in xterm, use control sequences to control cursor
if &term == "xterm-256color" || &term == "xterm" || &term == "screen-256color"
    "Make the cursor in command mode be a blinking block
    "and the cursor in insert mode be a solid underscore
    let &t_SI = "\<Esc>[5 q"
    let &t_EI = "\<Esc>[1 q"
    "make the cursor change back when leave vim
    autocmd VimLeave * silent !echo -ne "\033]112\007"
endif

if &term =~ '^screen'
    " When inside xterm, inside screen, the Shift and Ctrl modifiers don't
    " work well -- here i'm manually adding the mappings for xterm keys,
    " Do this as my tmux configuration sets the use of xterm keys for these
    " modifiers.
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

"Make the cursor always stay 3 lines inside the window when scrolling
set scrolloff=3

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Mappings {{{

let mapleader=" "
let maplocalleader="\\"

" macro to put spaces around a character - e.g. python operators
let @s='?\S[=*<+/>-]\Slcl  P:nohlsearch'

" indentation in visual
vnoremap < <gv
vnoremap > >gv

" Highlight last modified text
nnoremap <expr> gV "`[".getregtype(v:register)[0]."`]"

" make Y match other capitals
nnoremap Y y$

" Make cw consistent with the rest of vim
nnoremap cw dwi

" Reverse whether going to exact position or linewise in motions
" This only remaps the operation in normal mode - so in operation
" pending mode the mappings stay the same.
nnoremap ' `
nnoremap ` '

" Mapping from vimcast 62
nnoremap <silent> Q :normal n.<CR>

" Quicker looking at buffers
nnoremap <leader>bs :ls<CR>:b<space>

" Quick save
nnoremap <silent> <leader>s :w<CR>

" Remove trailing whitespace
nnoremap <silent> <F10> :%s/\s\+$//<CR>:nohlsearch<CR>

nnoremap <F12>  :!ctags -R --fields=+iaS --extra=+q .<CR><CR>
nnoremap <silent> <leader>nh :nohlsearch<CR>

nnoremap <silent> <leader>cl :setlocal completeopt+=longest<CR>
nnoremap <silent> <leader>cn :setlocal completeopt-=longest<CR>

" Choose windows based on number
nnoremap <silent> g1 :exe 1 . "wincmd w"<CR>
nnoremap <silent> g2 :exe 2 . "wincmd w"<CR>
nnoremap <silent> g3 :exe 3 . "wincmd w"<CR>
nnoremap <silent> g4 :exe 4 . "wincmd w"<CR>
nnoremap <silent> g5 :exe 5 . "wincmd w"<CR>
nnoremap <silent> g6 :exe 6 . "wincmd w"<CR>

" In Dvorak, keep completion commands nearer each other
inoremap <C-b> <C-p>

" j and k keys below the 4 key in Dvorak
noremap <silent> gj @='4j'<CR>
noremap <silent> gk @='4k'<CR>

" For my specific keyboard layout
noremap <leader>' :
noremap <leader>z :

noremap ; ,
noremap , ;

"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Automation {{{

"Automatically save and load folds for text files (program files will
"have the syntax folding on).
au BufWinLeave ?*.txt mkview
au BufWinEnter ?*.txt silent loadview
"NOTE the regex matches filenames, the ? is there so it doesn't match empty
"filenames, else there would be an error when opening help

"turn the plugin lookup on
"turn automatic filetype indentation on
filetype plugin on
filetype indent on

" Set scripts to be executable from the shell
function MakeExecutableIfScript()
    if getline(1) =~ "^#!"
        if getline(1) =~ "/bin/"
            silent !chmod +x <afile>
        endif
    endif
endfunction

au BufWritePost * call MakeExecutableIfScript()

" When executing automatic commands, wait until finished
set lazyredraw

" Scratch file function from http://dhruvasagar.com/tag/vim
function ScratchEdit(cmd, options)
    exe a:cmd tempname()
    setl buftype=nofile bufhidden=wipe nobuflisted
    if !empty(a:options) | exe 'setl' a:options | endif
endfunction

command -bar -nargs=* Sedit call ScratchEdit('edit', <q-args>)
command -bar -nargs=* Ssedit call ScratchEdit('split', <q-args>)
command -bar -nargs=* Svedit call ScratchEdit('vsplit', <q-args>)
command -bar -nargs=* Stabedit call ScratchEdit('tabe', <q-args>)

" Function to move/copy lines whether they're inside folds or not
command -nargs=* O call WithOpenFolds(<f-args>)

function WithOpenFolds(command)
  normal zn
  execute a:command
  normal zN
endfunction

"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filters {{{
function CompareLength(line1, line2) abort
    let [length1, length2] = [strchars(a:line1), strchars(a:line2)]
    if length1 < length2
        return 1
    else
        if length1 > length2
            return -1
        else
            return 0
        endif
    endif
endfunction

function SortByLength(reverse) abort
    let lines_to_sort = getline(a:firstline, a:lastline)
    if a:reverse
        call setline(a:firstline, reverse(sort(lines_to_sort, "CompareLength")))
    else
        call setline(a:firstline, sort(lines_to_sort, "CompareLength"))
    endif
endfunction

command -bang -range Lensort <line1>,<line2>call SortByLength(<bang>0)
" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Completion {{{

"Don't scan included files - takes too long and can use <C-x><C-i>
set complete=.,w,b,u,t
set completeopt=menu
" Lower priority tab completion
"search current and above directory for tag file
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tags=./tags;$HOME
"change how the command line autocomplete works
"set wildmode=<parameters>
set smarttab
set shiftround
set autoread
set wildmenu
set wildmode=full
set wildignore=*.o,*.obj,*~,*.swp
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.pyc,__pycache__/

" if ignorecase is on, use the case of the matching pattern to choose the case
" of the insertion pattern to insert -- I rarely use ignorecase, but when I do,
" this comes in handy.
set infercase
set noignorecase

"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Information {{{

"give me two lines to write commands out
"show commands as typing add line numbers
"don't save options when using mksession (interferes with plugins)
set showcmd
set showmode
set cmdheight=2
set shortmess=aOtTc
set ruler
set number
set sessionoptions-=options

"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{ Netrw

" Make gx open the file under cursor with whatever program it requires.
" NOTE: URL's require 'http://' at the front
let g:netrw_browsex_viewer = "xdg-open"

" Default browser liststyle
let g:netrw_liststyle=3

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Other Settings {{{

" Make the search path include current directory, directory of current buffer,
" and directories below.
set path=.,**,,

"Make split windows open on right and below by default
set splitright
set splitbelow
"Turn off the mouse
set mouse=""
" Backspaces and History
set backspace=indent,eol,start
set history=50
"Separate windows when scrolling
set nocursorbind
set noscrollbind
"Allows opening of buffers in the background
"don't make automatic backups
set nobackup
set hidden
"set bufhidden=hide

"Format options: automatic folding, comment folding etc.
set textwidth=79
set formatoptions+=crotql
set virtualedit=block

"Make automatic open with folds all closed
" Give me enough time to think aobut which command I want
set foldlevelstart=0
set timeoutlen=1000

" Conceal text - define when it's not shown
set conceallevel=0
set concealcursor=nc

" incremental searches
set incsearch

" I think I'm starting to like this - try for now
set nowrap

" When running under zsh, have a problem with 'grep -s ...'
" could do stuff with NO_NOMATCH, but for compatibility with other boxes, just
" use bash
set shell=/bin/bash

"}}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Printoptions {{{

"When printing, include numbers
"(only works if compiled with the correct options - not sure that's what's done
set printoptions=number:y

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim: foldmethod=marker
